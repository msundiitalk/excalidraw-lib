"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkExcalidraw"] = globalThis["webpackChunkExcalidraw"] || []).push([["image"],{

/***/ "../../data/image.ts":
/*!***************************!*\
  !*** ../../data/image.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getTEXtChunk\": () => (/* binding */ getTEXtChunk),\n/* harmony export */   \"encodePngMetadata\": () => (/* binding */ encodePngMetadata),\n/* harmony export */   \"decodePngMetadata\": () => (/* binding */ decodePngMetadata),\n/* harmony export */   \"encodeSvgMetadata\": () => (/* binding */ encodeSvgMetadata),\n/* harmony export */   \"decodeSvgMetadata\": () => (/* binding */ decodeSvgMetadata)\n/* harmony export */ });\n/* harmony import */ var png_chunks_extract__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! png-chunks-extract */ \"../../../node_modules/png-chunks-extract/index.js\");\n/* harmony import */ var png_chunks_extract__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(png_chunks_extract__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var png_chunk_text__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! png-chunk-text */ \"../../../node_modules/png-chunk-text/index.js\");\n/* harmony import */ var png_chunks_encode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! png-chunks-encode */ \"../../../node_modules/png-chunks-encode/index.js\");\n/* harmony import */ var png_chunks_encode__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(png_chunks_encode__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _encode__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./encode */ \"../../data/encode.ts\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../constants */ \"../../constants.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n// -----------------------------------------------------------------------------\n// PNG\n// -----------------------------------------------------------------------------\nconst blobToArrayBuffer = (blob) => {\n    if (\"arrayBuffer\" in blob) {\n        return blob.arrayBuffer();\n    }\n    // Safari\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = (event) => {\n            var _a;\n            if (!((_a = event.target) === null || _a === void 0 ? void 0 : _a.result)) {\n                return reject(new Error(\"couldn't convert blob to ArrayBuffer\"));\n            }\n            resolve(event.target.result);\n        };\n        reader.readAsArrayBuffer(blob);\n    });\n};\nconst getTEXtChunk = (blob) => __awaiter(void 0, void 0, void 0, function* () {\n    const chunks = png_chunks_extract__WEBPACK_IMPORTED_MODULE_0___default()(new Uint8Array(yield blobToArrayBuffer(blob)));\n    const metadataChunk = chunks.find((chunk) => chunk.name === \"tEXt\");\n    if (metadataChunk) {\n        return png_chunk_text__WEBPACK_IMPORTED_MODULE_1__.decode(metadataChunk.data);\n    }\n    return null;\n});\nconst encodePngMetadata = ({ blob, metadata, }) => __awaiter(void 0, void 0, void 0, function* () {\n    const chunks = png_chunks_extract__WEBPACK_IMPORTED_MODULE_0___default()(new Uint8Array(yield blobToArrayBuffer(blob)));\n    const metadataChunk = png_chunk_text__WEBPACK_IMPORTED_MODULE_1__.encode(_constants__WEBPACK_IMPORTED_MODULE_4__.MIME_TYPES.excalidraw, JSON.stringify(yield (0,_encode__WEBPACK_IMPORTED_MODULE_3__.encode)({\n        text: metadata,\n        compress: true,\n    })));\n    // insert metadata before last chunk (iEND)\n    chunks.splice(-1, 0, metadataChunk);\n    return new Blob([png_chunks_encode__WEBPACK_IMPORTED_MODULE_2___default()(chunks)], { type: _constants__WEBPACK_IMPORTED_MODULE_4__.MIME_TYPES.png });\n});\nconst decodePngMetadata = (blob) => __awaiter(void 0, void 0, void 0, function* () {\n    const metadata = yield getTEXtChunk(blob);\n    if ((metadata === null || metadata === void 0 ? void 0 : metadata.keyword) === _constants__WEBPACK_IMPORTED_MODULE_4__.MIME_TYPES.excalidraw) {\n        try {\n            const encodedData = JSON.parse(metadata.text);\n            if (!(\"encoded\" in encodedData)) {\n                // legacy, un-encoded scene JSON\n                if (\"type\" in encodedData &&\n                    encodedData.type === _constants__WEBPACK_IMPORTED_MODULE_4__.EXPORT_DATA_TYPES.excalidraw) {\n                    return metadata.text;\n                }\n                throw new Error(\"FAILED\");\n            }\n            return yield (0,_encode__WEBPACK_IMPORTED_MODULE_3__.decode)(encodedData);\n        }\n        catch (error) {\n            console.error(error);\n            throw new Error(\"FAILED\");\n        }\n    }\n    throw new Error(\"INVALID\");\n});\n// -----------------------------------------------------------------------------\n// SVG\n// -----------------------------------------------------------------------------\nconst encodeSvgMetadata = ({ text }) => __awaiter(void 0, void 0, void 0, function* () {\n    const base64 = yield (0,_encode__WEBPACK_IMPORTED_MODULE_3__.stringToBase64)(JSON.stringify(yield (0,_encode__WEBPACK_IMPORTED_MODULE_3__.encode)({ text })), true /* is already byte string */);\n    let metadata = \"\";\n    metadata += `<!-- payload-type:${_constants__WEBPACK_IMPORTED_MODULE_4__.MIME_TYPES.excalidraw} -->`;\n    metadata += `<!-- payload-version:2 -->`;\n    metadata += \"<!-- payload-start -->\";\n    metadata += base64;\n    metadata += \"<!-- payload-end -->\";\n    return metadata;\n});\nconst decodeSvgMetadata = ({ svg }) => __awaiter(void 0, void 0, void 0, function* () {\n    if (svg.includes(`payload-type:${_constants__WEBPACK_IMPORTED_MODULE_4__.MIME_TYPES.excalidraw}`)) {\n        const match = svg.match(/<!-- payload-start -->(.+?)<!-- payload-end -->/);\n        if (!match) {\n            throw new Error(\"INVALID\");\n        }\n        const versionMatch = svg.match(/<!-- payload-version:(\\d+) -->/);\n        const version = (versionMatch === null || versionMatch === void 0 ? void 0 : versionMatch[1]) || \"1\";\n        const isByteString = version !== \"1\";\n        try {\n            const json = yield (0,_encode__WEBPACK_IMPORTED_MODULE_3__.base64ToString)(match[1], isByteString);\n            const encodedData = JSON.parse(json);\n            if (!(\"encoded\" in encodedData)) {\n                // legacy, un-encoded scene JSON\n                if (\"type\" in encodedData &&\n                    encodedData.type === _constants__WEBPACK_IMPORTED_MODULE_4__.EXPORT_DATA_TYPES.excalidraw) {\n                    return json;\n                }\n                throw new Error(\"FAILED\");\n            }\n            return yield (0,_encode__WEBPACK_IMPORTED_MODULE_3__.decode)(encodedData);\n        }\n        catch (error) {\n            console.error(error);\n            throw new Error(\"FAILED\");\n        }\n    }\n    throw new Error(\"INVALID\");\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../data/image.ts\n");

/***/ })

}]);